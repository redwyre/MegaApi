using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace MegaApi.Tests
{
    [TestClass]
    public class UnitTest_Rsa
    {
        [TestMethod]
        public void Test_zclip()
        {
            uint[] input = new uint[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209567744, 98068457, 164096092, 166718799, 227458956, 244657566, 123188338, 31592448, 115985592, 214410993, 31162265, 35463419, 100918190, 80277450, 216779499, 11002774, 70436965, 36018215, 255302740, 234153074, 2768685, 41225562, 32560060, 11916024, 78068921, 253600946, 261504144, 121514206, 245161956, 83881553, 232731031, 95394990, 211161992, 37420460, 231378588, 77470230, 174837416, 4119 };

            uint[] expected = new uint[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209567744, 98068457, 164096092, 166718799, 227458956, 244657566, 123188338, 31592448, 115985592, 214410993, 31162265, 35463419, 100918190, 80277450, 216779499, 11002774, 70436965, 36018215, 255302740, 234153074, 2768685, 41225562, 32560060, 11916024, 78068921, 253600946, 261504144, 121514206, 245161956, 83881553, 232731031, 95394990, 211161992, 37420460, 231378588, 77470230, 174837416, 4119 };
            uint[] actual = Rsa.zclip(input);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_nbits()
        {
            uint input = 39736;

            int expected = 16;
            int actual = Rsa.nbits(input);

            Assert.AreEqual(actual, expected);
        }

        [TestMethod]
        public void Test_badd()
        {
            uint[] a = new uint[] { 238100599, 54056075, 42745978, 123595721, 225612379, 257642912, 13239079, 107398458, 229029185, 267284223, 83335341, 3166468, 38657095, 199961019, 233613710, 253149333, 169707233, 153134661, 198092751, 64180749, 153578891, 182730773, 237944325, 141293697, 3844802, 33100053, 119304417, 133119334, 143848898, 11234963, 189568902, 75495980, 204308947, 191041393, 169747173, 68861891, 184728632, 26236081, 117524135, 166319933, 34088198, 168757133, 232649891, 53227688, 229109633, 176460233, 100542373, 166725236, 166971306, 93488506, 261086995, 11930145, 31412373, 250136098, 58021278, 111535401, 185501793, 74345444, 25059829, 83514762, 75107013, 261038474, 70264959, 160483767, 185285977, 127366705, 39338867, 102114327, 260094064, 7730116, 257635118, 156240157, 8748561 };
            uint[] b = new uint[] { 163414291, 68312755, 78733911, 33287876, 226506382, 27421187, 141388520, 57462431, 86733617, 93687065, 5929873, 208674596, 218152967, 101480203, 189891328, 133821815, 178263424, 100338629, 119339233, 61232768, 14057130, 211519785, 199558790, 230143194, 80268707, 137248495, 139852758, 91309603, 133348148, 123510659, 253145023, 85677816, 199606044, 219034298, 231754323, 228656166, 26877 };

            uint[] expected = new uint[] { 133079434, 122368831, 121479889, 156883597, 183683305, 16628644, 154627600, 164860889, 47327346, 92535833, 89265215, 211841064, 256810062, 33005766, 155069583, 118535693, 79535202, 253473291, 48996528, 125413518, 167636021, 125815102, 169067660, 103001436, 84113510, 170348548, 259157175, 224428937, 8761590, 134745623, 174278469, 161173797, 135479535, 141640236, 133066041, 29082602, 184755510, 26236081, 117524135, 166319933, 34088198, 168757133, 232649891, 53227688, 229109633, 176460233, 100542373, 166725236, 166971306, 93488506, 261086995, 11930145, 31412373, 250136098, 58021278, 111535401, 185501793, 74345444, 25059829, 83514762, 75107013, 261038474, 70264959, 160483767, 185285977, 127366705, 39338867, 102114327, 260094064, 7730116, 257635118, 156240157, 8748561 };
            uint[] actual = Rsa.badd(a, b);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_bsub()
        {
            uint[] a = new uint[] { 193097728, 216111157, 148796767, 178123720, 233081406, 64241673, 199051286, 148510454, 19105308, 236392922, 220959786, 202953207, 7503953, 87469495, 180671365, 17412369, 111222516, 123722111, 201232752, 110985993, 247259825, 24675151, 260705074, 11441275, 80255668, 265621622, 91967001, 182904618, 137555178, 117547593, 98618494, 239117002, 257813810, 149098901, 27925449, 70918756, 54198055, 198363309, 176802379, 16439625, 232378225, 120063495, 208945832, 48533977, 56894327, 38807949, 179583548, 196472810, 223565733, 239206058, 77373574, 136927053, 46472286, 108678436, 91718906, 136456434, 211457069, 205873966, 91209955, 131081759, 224544307, 82856007, 197355651, 165061564, 86615411, 41779046, 156696115, 222338499, 162468862, 139202498, 202502184, 137331897, 97586053, 32989 };
            uint[] b = new uint[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210997248, 40319348, 37366669, 234440035, 148593652, 218896432, 134579237, 6946953, 74633121, 116967489, 258535140, 15343364, 178567561, 177947579, 207696480, 127671450, 406481, 107023480, 192928249, 191972337, 242801454, 36949254, 198366934, 209388856, 110726313, 40351778, 211735696, 169504602, 188392508, 84813093, 179266693, 264201573, 37880218, 89784798, 136057034, 250540986, 230579749 };

            uint[] expected = new uint[] {};
            uint[] actual = Rsa.bsub(a, b);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_ip()
        {
            uint[] w = new uint[] { 0 };
            uint n = 0;
            uint x = 0;
            uint y = 0;
            uint c = 0;

            uint expected = 125424543;
            uint actual = Rsa.ip(w, n, x, y, c);

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void Test_bsqr()
        {
            uint[] x = new uint[] { 0 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.bsqr(x);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_bmul()
        {
            uint[] x = new uint[] { 0 };
            uint[] y= new uint[] { 0 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.bmul(x, y);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_toppart()
        {
            uint[] x = new uint[] { 210997248, 40319348, 37366669, 234440035, 148593652, 218896432, 134579237, 6946953, 74633121, 116967489, 258535140, 15343364, 178567561, 177947579, 207696480, 127671450, 406481, 107023480, 192928249, 191972337, 242801454, 36949254, 198366934, 209388856, 110726313, 40351778, 211735696, 169504602, 188392508, 84813093, 179266693, 264201573, 37880218, 89784798, 136057034, 250540986, 230579749 };
            int start = 36;
            int end = 2;

            ulong expected = 61895780317721530;
            ulong actual = Rsa.toppart(x, start, end);

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void Test_bdiv()
        {
            uint[] a = new uint[] { 0 };
            uint[] b = new uint[] { 0 };

            Rsa.QAndMod expected = new Rsa.QAndMod { q = new uint[] { 1 }, mod = new uint[] { 1 } };
            Rsa.QAndMod actual = Rsa.bdiv(a, b);

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void Test_simplemod()
        {
            uint[] i = new uint[] { 0 };
            uint m = 0;

            uint expected = 1;
            uint actual = Rsa.simplemod(i, m);

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void Test_bmod()
        {
            uint[] m = new uint[] { 158648633, 193799795, 90383266, 200597396, 137399733, 69587137, 9011288, 262211232, 138495788, 249851788, 251983502, 159977121, 62630475, 39889332, 211469843, 64059841, 209191011, 167339536, 66172925, 187610900, 218556301, 114697020, 87604525, 212453296, 136472984, 76555899, 257608173, 71082406, 86356906, 75845858, 90548982, 26934262, 31335456, 13260192, 62554561, 237367023, 56293 };
            uint[] p = new uint[] { 253136065, 134837973, 29665951, 644063, 267647212, 26306753, 250738913, 222414604, 250390509, 124245167, 89597995, 163533393, 136103543, 87690333, 196009905, 214547065, 198875484, 243345581, 67699876, 235695784, 258707090, 134967601, 251557436, 125946167, 208218163, 7002442, 236007437, 71064938, 115800190, 14250063, 148527262, 83519855, 240223973, 193610232, 118952709, 126489687, 226588187, 235209819, 8063488, 89857206, 48431201, 257845116, 237804775, 60763228, 132604472, 267548047, 267176571, 172982334, 232854948, 30968361, 221192682, 57216702, 235077067, 128663830, 182802562, 95105529, 121077310, 197674882, 176432882, 263135909, 5433789, 23933429, 136240791, 139375301, 88714148, 245409637, 939664, 162458576, 209273340, 125813869, 156672976, 148682787, 243860994, 9 };

            uint[] expected = new uint[] { 243220623, 71799706, 23996672, 161097660, 260810662, 50537486, 60925082, 108472501, 77992310, 33640405, 63729578, 248794954, 133635590, 73584582, 11835070, 14313015, 15530790, 38791679, 238202097, 243628350, 198433985, 151423010, 172016369, 256658428, 212305923, 189214808, 60114075, 62023575, 52897597, 247328894, 115112003, 195433250, 99730534, 80905969, 170971944, 146014593, 17639 };
            uint[] actual = Rsa.bmod(p, m);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_bmod2()
        {
            uint[] x = new uint[] { 0 };
            uint[] m = new uint[] { 0 };
            uint[] mu = new uint[] { 0 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.bmod2(x, m, mu);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_bexpmod()
        {
            uint[] g = new uint[] { 0 };
            uint[] e = new uint[] { 0 };
            uint[] m = new uint[] { 0 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.bexpmod(g, e, m);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_bmodexp()
        {
            uint[] g = new uint[] { 0 };
            uint[] e = new uint[] { 0 };
            uint[] m = new uint[] { 0 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.bmodexp(g, e, m);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_RSAencrypt()
        {
            uint[] s = new uint[] { 0 };
            uint[] e = new uint[] { 0 };
            uint[] m = new uint[] { 0 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.RSAencrypt(s, e, m);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_RSAdecrypt()
        {
            uint[] m = new uint[] { 1, 2, 3, 4 };
            uint[] d = new uint[] { 1, 2, 3, 4 };
            uint[] p = new uint[] { 1, 2, 3, 4 };
            uint[] q = new uint[] { 1, 2, 3, 4 };
            uint[] u = new uint[] { 1, 2, 3, 4 };

            uint[] expected = new uint[] { 1 };
            uint[] actual = Rsa.RSAdecrypt(m, d, p, q, u);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        [TestMethod]
        public void Test_mpi2b()
        {
            // "CAClMKYMcWw4Wn4cNIXdbn7A18__s8IwGvIKQLAZspb-phMiniUscMyhOio7yuADKUckIGytjyF9R7ikh8H_u6ljrsm7ptn_jiquMAIcEC_5wRLmNh6cC2_7O4qtTRYXyBfOFHlB71sOrLCgsPvDXJQMTAGabc3EGDgAdX0wqLBpAniX01e_oehZM7B-ua-9HN2omuvBOerOJ9AsZaUafWaWdEofNqmZYSKc4f2fBmNcEZypzOVx0Up9vKuyMNRkKQYtTxDUjzn_64ESXADxE2J-0gmvIb_bzb2dpjTQ6o9PIHNEpsW-qoI_0reE0ugfTDQPk_P25SxagjAcc8gvB_w6"
            byte[] input = new byte[] { 8, 0, 165, 48, 166, 12, 113, 108, 56, 90, 126, 28, 52, 133, 221, 110, 126, 192, 215, 207, 255, 179, 194, 48, 26, 242, 10, 64, 176, 25, 178, 150, 254, 166, 19, 34, 158, 37, 44, 112, 204, 161, 58, 42, 59, 202, 224, 3, 41, 71, 36, 32, 108, 173, 143, 33, 125, 71, 184, 164, 135, 193, 255, 187, 169, 99, 174, 201, 187, 166, 217, 255, 142, 42, 174, 48, 2, 28, 16, 47, 249, 193, 18, 230, 54, 30, 156, 11, 111, 251, 59, 138, 173, 77, 22, 23, 200, 23, 206, 20, 121, 65, 239, 91, 14, 172, 176, 160, 176, 251, 195, 92, 148, 12, 76, 1, 154, 109, 205, 196, 24, 56, 0, 117, 125, 48, 168, 176, 105, 2, 120, 151, 211, 87, 191, 161, 232, 89, 51, 176, 126, 185, 175, 189, 28, 221, 168, 154, 235, 193, 57, 234, 206, 39, 208, 44, 101, 165, 26, 125, 102, 150, 116, 74, 31, 54, 169, 153, 97, 34, 156, 225, 253, 159, 6, 99, 92, 17, 156, 169, 204, 229, 113, 209, 74, 125, 188, 171, 178, 48, 212, 100, 41, 6, 45, 79, 16, 212, 143, 57, 255, 235, 129, 18, 92, 0, 241, 19, 98, 126, 210, 9, 175, 33, 191, 219, 205, 189, 157, 166, 52, 208, 234, 143, 79, 32, 115, 68, 166, 197, 190, 170, 130, 63, 210, 183, 132, 210, 232, 31, 76, 52, 15, 147, 243, 246, 229, 44, 90, 130, 48, 28, 115, 200, 47, 7, 252, 58 };

            uint[] expected = new uint[] { 252181562, 29834370, 207258160, 255815250, 204738451, 221151732, 265467780, 199927843, 54830789, 150270471, 104124650, 215734746, 253870043, 132980890, 15799138, 135341504, 255459307, 82906440, 69797421, 186846534, 176012459, 240590100, 27044300, 6698433, 216137119, 160829993, 169817769, 107571012, 94706301, 41747142, 20572878, 176795324, 264051933, 185068442, 32004403, 221608954, 151156887, 51022598, 134247805, 215761283, 201431661, 97075396, 11598787, 15387402, 155316059, 24961351, 219551688, 62434004, 202076155, 241394153, 268026130, 2212098, 237678128, 174956536, 61786555, 268155542, 145000385, 35116155, 7122319, 43283010, 197844995, 169058979, 86798540, 20064738, 43450022, 67830171, 1765898, 268123171, 247519183, 140367591, 176036916, 118932357, 87074316, 10 };
            uint[] actual = Rsa.mpi2b(input);

            Assert.IsTrue(Utils.CompareTables(actual, expected));
        }

        //[TestMethod]
        //public void Test_template()
        //{
        //    string input = "";

        //    string expected = "";
        //    string actual = "x";

        //    Assert.AreEqual(actual, expected);
        //}

        //[TestMethod]
        //public void Test_zclip()
        //{
        //    uint[] input = new uint[] { 0 };

        //    uint[] expected = new uint[] { 0 };
        //    uint[] actual = Rsa.zclip(input);

        //    Assert.IsTrue(Utils.CompareTables(actual, expected));
        //}
    }
}
